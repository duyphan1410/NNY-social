import './bootstrap';
import Alpine from 'alpinejs';
import Echo from 'laravel-echo';
import Pusher from 'pusher-js';

window.Alpine = Alpine;
Alpine.start();

// Echo config
window.Pusher = Pusher;
window.Echo = new Echo({
    broadcaster: 'pusher',
    key: 'local-key',
    wsHost: window.location.hostname,
    wsPort: 6001,
    forceTLS: false,
    disableStats: true,
    cluster: 'mt1',
});

console.log("‚úÖ app.js ƒë√£ load");

const baseUrl = window.location.origin + '/social-network/public';

// Khi trang ƒë∆∞·ª£c t·∫£i
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ Trang ƒë√£ load, kh·ªüi t·∫°o h·ªá th·ªëng th√¥ng b√°o');

    const notificationBtn = document.getElementById('notification-btn');
    const notificationDropdown = document.getElementById('notification-dropdown');
    const notificationCount = document.getElementById('notification-count');
    const markAllReadBtn = document.getElementById('mark-all-read');

    // Toggle dropdown khi click v√†o n√∫t th√¥ng b√°o
    notificationBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        notificationDropdown.classList.toggle('show');

        // N·∫øu dropdown hi·ªÉn th·ªã v√† c√≥ th√¥ng b√°o ch∆∞a ƒë·ªçc, ƒë√°nh d·∫•u ƒë√£ xem (ch∆∞a ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc)
        if (notificationDropdown.classList.contains('show')) {
            markNotificationsAsViewed();
        }
    });

    // ƒê√≥ng dropdown khi click b√™n ngo√†i
    document.addEventListener('click', (e) => {
        if (!notificationDropdown.contains(e.target) && e.target !== notificationBtn) {
            notificationDropdown.classList.remove('show');
        }
    });

    // G·∫Øn s·ª± ki·ªán click cho c√°c notification hi·ªán c√≥
    function attachNotificationEvents() {
        document.querySelectorAll('.notification-item').forEach(item => {
            item.addEventListener('click', function(e) {
                // Ch·ªâ x·ª≠ l√Ω khi click v√†o ph·∫ßn n·ªôi dung, kh√¥ng ph·∫£i action button
                if (!e.target.closest('.action-btn')) {
                    const notificationId = this.dataset.id;

                    // ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc
                    markAsRead(notificationId);

                    // N·∫øu c√≥ link trong notification, chuy·ªÉn h∆∞·ªõng
                    const link = this.querySelector('a');
                    if (link && link.href) {
                        window.location.href = link.href;
                    }
                }
            });
        });
    }

    // G·∫Øn s·ª± ki·ªán cho c√°c n√∫t x·ª≠ l√Ω trong th√¥ng b√°o
    function attachActionButtonEvents() {
        document.querySelectorAll('.action-btn').forEach(btn => {
            btn.addEventListener('click', function(e) {
                e.stopPropagation();
                const notificationId = this.dataset.id;

                // ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc
                markAsRead(notificationId);

                // Th√™m logic x·ª≠ l√Ω th√¥ng b√°o ·ªü ƒë√¢y n·∫øu c·∫ßn
                console.log(`X·ª≠ l√Ω th√¥ng b√°o c√≥ ID: ${notificationId}`);

                // ·∫®n notification item sau khi x·ª≠ l√Ω
                const item = this.closest('.notification-item');
                if (item) {
                    item.style.display = 'none';
                }

                // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√¥ng b√°o
                updateNotificationCount();
            });
        });
    }

    // ƒê√°nh d·∫•u ƒë√£ xem khi m·ªü dropdown (kh√¥ng ph·∫£i ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc)
    function markNotificationsAsViewed() {
        // C·∫≠p nh·∫≠t giao di·ªán ƒë·ªÉ hi·ªÉn th·ªã ƒë√£ xem
        notificationCount.classList.add('hidden');
    }

    // ƒê√°nh d·∫•u m·ªôt th√¥ng b√°o ƒë√£ ƒë·ªçc
    function markAsRead(notificationId) {
        fetch(`${baseUrl}/notifications/mark-as-read/${notificationId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
            }
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // C·∫≠p nh·∫≠t UI
                    const item = document.querySelector(`.notification-item[data-id="${notificationId}"]`);
                    if (item) {
                        item.classList.remove('unread');
                    }

                    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√¥ng b√°o
                    updateNotificationCount();
                }
            })
            .catch(error => console.error('L·ªói khi ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc:', error));
    }

    // ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc
    markAllReadBtn.addEventListener('click', () => {
        fetch(`${baseUrl}/notifications/mark-all-as-read`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
            }
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // C·∫≠p nh·∫≠t UI
                    document.querySelectorAll('.notification-item.unread').forEach(item => {
                        item.classList.remove('unread');
                    });

                    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
                    notificationCount.textContent = '0';
                    notificationCount.classList.add('hidden');

                    console.log('‚úÖ ƒê√£ ƒë√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o l√† ƒë√£ ƒë·ªçc');
                }
            })
            .catch(error => console.error('L·ªói khi ƒë√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc:', error));
    });

    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc
    function updateNotificationCount() {
        fetch(`${baseUrl}/notifications/unread-count`)
            .then(res => res.json())
            .then(data => {
                console.log(data.count);
                const notificationCount = document.getElementById('notification-count');
                notificationCount.textContent = data.count;
                if (data.count > 0) {
                    notificationCount.classList.remove('hidden');
                    notificationCount.style.visibility = 'visible';
                    document.querySelector('#notification-btn').classList.add('bg-red-600');
                } else {
                    notificationCount.classList.add('hidden');
                    notificationCount.style.visibility = 'hidden';
                    document.querySelector('#notification-btn').classList.remove('bg-red-600');
                }
            })
            .catch(error => console.error('L·ªói khi l·∫•y s·ªë l∆∞·ª£ng th√¥ng b√°o:', error));
    }



    // Kh·ªüi t·∫°o c√°c s·ª± ki·ªán
    attachNotificationEvents();
    attachActionButtonEvents();

    // L·∫•y s·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc ban ƒë·∫ßu
    updateNotificationCount();
});
