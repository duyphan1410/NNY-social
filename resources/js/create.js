// JavaScript cho creat.js
document.addEventListener('DOMContentLoaded', function() {
    // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng file
    const MAX_IMAGES = 5;
    const MAX_VIDEOS = 3;

    // Kh·ªüi t·∫°o c√°c bi·∫øn
    const imageInput = document.getElementById('images');
    const videoInput = document.getElementById('videos');
    const imagePreview = document.getElementById('image-preview');
    const videoPreview = document.getElementById('video-preview');
    const contentTextarea = document.getElementById('content');

    // M·∫£ng l∆∞u tr·ªØ c√°c file ƒë√£ ch·ªçn - ƒë·∫∑t ·ªü ph·∫°m vi to√†n c·ª•c cho window
    window.selectedImages = [];
    window.selectedVideos = [];

    // Th√™m c√°c bi·ªÉu t∆∞·ª£ng v√† text cho input file
    setupCustomFileUpload(imageInput, `K√©o th·∫£ ho·∫∑c ch·ªçn ·∫£nh (t·ªëi ƒëa ${MAX_IMAGES})`, 'fa-image');
    setupCustomFileUpload(videoInput, `K√©o th·∫£ ho·∫∑c ch·ªçn video (t·ªëi ƒëa ${MAX_VIDEOS})`, 'fa-video');

    // C√†i ƒë·∫∑t x·ª≠ l√Ω khi ch·ªçn file ·∫£nh
    imageInput.addEventListener('change', function(event) {
        let newFiles = Array.from(event.target.files);

        // Ki·ªÉm tra gi·ªõi h·∫°n s·ªë l∆∞·ª£ng ·∫£nh
        if (window.selectedImages.length + newFiles.length > MAX_IMAGES) {
            alert(`B·∫°n ch·ªâ c√≥ th·ªÉ ch·ªçn t·ªëi ƒëa ${MAX_IMAGES} ·∫£nh.`);
            return;
        }

        // Th√™m c√°c file m·ªõi v√†o m·∫£ng ƒë√£ ch·ªçn
        window.selectedImages = window.selectedImages.concat(newFiles);

        // C·∫≠p nh·∫≠t UI v√† ƒë·ªìng b·ªô files
        syncFiles(this, window.selectedImages);
        updateFilePreview(imagePreview, window.selectedImages, 'image', this);
    });

    // C√†i ƒë·∫∑t x·ª≠ l√Ω khi ch·ªçn file video
    videoInput.addEventListener('change', function(event) {
        let newFiles = Array.from(event.target.files);

        // Ki·ªÉm tra gi·ªõi h·∫°n s·ªë l∆∞·ª£ng video
        if (window.selectedVideos.length + newFiles.length > MAX_VIDEOS) {
            alert(`B·∫°n ch·ªâ c√≥ th·ªÉ ch·ªçn t·ªëi ƒëa ${MAX_VIDEOS} video.`);
            return;
        }

        // Th√™m c√°c file m·ªõi v√†o m·∫£ng ƒë√£ ch·ªçn
        window.selectedVideos = window.selectedVideos.concat(newFiles);

        // C·∫≠p nh·∫≠t UI v√† ƒë·ªìng b·ªô files
        syncFiles(this, window.selectedVideos);
        updateFilePreview(videoPreview, window.selectedVideos, 'video', this);
    });

    // Th√™m hi·ªáu ·ª©ng t·ª± ƒë·ªông m·ªü r·ªông cho textarea
    autoResizeTextarea(contentTextarea);

    // X·ª≠ l√Ω drag v√† drop cho ·∫£nh v√† video
    setupDragAndDrop(imageInput, MAX_IMAGES);
    setupDragAndDrop(videoInput, MAX_VIDEOS);

    // X·ª≠ l√Ω g·ª≠i form
    setupFormSubmission();
});

// H√†m t·∫°o custom file upload UI
function setupCustomFileUpload(inputElement, placeholderText, iconClass) {
    // T·∫°o wrapper
    const wrapper = document.createElement('div');
    wrapper.className = 'custom-file-upload';

    // Th√™m icon
    const icon = document.createElement('i');
    icon.className = 'fas ' + iconClass;
    wrapper.appendChild(icon);

    // Th√™m text
    const text = document.createElement('span');
    text.textContent = placeholderText;
    wrapper.appendChild(text);

    // Th√™m wrapper v√†o tr∆∞·ªõc input
    inputElement.parentNode.insertBefore(wrapper, inputElement);
    wrapper.appendChild(inputElement);
}

// H√†m c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng file ƒë√£ ch·ªçn trong UI
function updateSelectedFileCount(inputElement, files) {
    const displayText = inputElement.parentNode.querySelector('span');
    const fileCount = files.length;

    if (fileCount > 0) {
        displayText.textContent = fileCount + ' file ƒë∆∞·ª£c ch·ªçn';
    } else {
        if (inputElement.id === 'images') {
            displayText.textContent = 'K√©o th·∫£ ho·∫∑c ch·ªçn ·∫£nh (t·ªëi ƒëa 5)';
        } else {
            displayText.textContent = 'K√©o th·∫£ ho·∫∑c ch·ªçn video (t·ªëi ƒëa 3)';
        }
    }
}

// X·ª≠ l√Ω khi ch·ªçn file v√† hi·ªÉn th·ªã preview
function updateFilePreview(previewContainer, files, type, inputElement) {
    previewContainer.innerHTML = '';
    previewContainer.className = 'preview-container';

    if (files.length > 0) {
        inputElement.parentNode.classList.add('pulse-animation');
        setTimeout(() => {
            inputElement.parentNode.classList.remove('pulse-animation');
        }, 500);
    }

    // T·∫°o v√† hi·ªÉn th·ªã preview cho t·ª´ng file
    files.forEach((file, index) => {
        const previewItem = document.createElement('div');
        previewItem.className = 'preview-item';
        previewItem.dataset.index = index; // Th√™m ch·ªâ s·ªë c·ªßa file v√†o dataset

        if (type === 'image') {
            const img = document.createElement('img');
            img.src = URL.createObjectURL(file);
            previewItem.appendChild(img);
        } else if (type === 'video') {
            const video = document.createElement('video');
            video.src = URL.createObjectURL(file);
            video.setAttribute('controls', 'controls');
            previewItem.appendChild(video);
        }

        // N√∫t x√≥a file
        const removeBtn = document.createElement('button');
        removeBtn.className = 'preview-remove';
        removeBtn.innerHTML = '<i class="fas fa-times"></i>';
        removeBtn.addEventListener('click', function(e) {
            e.preventDefault();

            // X√≥a file kh·ªèi m·∫£ng
            if (type === 'image') {
                // X√≥a file t·∫°i index ƒë∆∞·ª£c l∆∞u trong dataset
                window.selectedImages.splice(index, 1);
                // C·∫≠p nh·∫≠t l·∫°i input v√† preview
                syncFiles(inputElement, window.selectedImages);
                updateFilePreview(previewContainer, window.selectedImages, type, inputElement);
            } else {
                // X√≥a file t·∫°i index ƒë∆∞·ª£c l∆∞u trong dataset
                window.selectedVideos.splice(index, 1);
                // C·∫≠p nh·∫≠t l·∫°i input v√† preview
                syncFiles(inputElement, window.selectedVideos);
                updateFilePreview(previewContainer, window.selectedVideos, type, inputElement);
            }
        });

        previewItem.appendChild(removeBtn);
        previewContainer.appendChild(previewItem);
    });
}

// H√†m ƒë·ªìng b·ªô files t·ª´ m·∫£ng v√†o input element
function syncFiles(inputElement, files) {
    let dataTransfer = new DataTransfer();
    files.forEach(file => dataTransfer.items.add(file));
    inputElement.files = dataTransfer.files;
    console.log(`üîÑ ƒê·ªìng b·ªô input ${inputElement.id} - S·ªë file:`, inputElement.files.length);

    // C·∫≠p nh·∫≠t text hi·ªÉn th·ªã
    updateSelectedFileCount(inputElement, files);
}

// Thi·∫øt l·∫≠p t·ª± ƒë·ªông m·ªü r·ªông textarea theo n·ªôi dung
function autoResizeTextarea(textarea) {
    textarea.addEventListener('input', function() {
        this.style.height = 'auto';
        this.style.height = (this.scrollHeight) + 'px';
    });

    // Kh·ªüi t·∫°o ban ƒë·∫ßu
    setTimeout(function() {
        textarea.style.height = 'auto';
        textarea.style.height = (textarea.scrollHeight) + 'px';
    }, 100);
}

// Thi·∫øt l·∫≠p drag v√† drop
function setupDragAndDrop(inputElement, maxFiles) {
    const dropArea = inputElement.parentNode;
    const type = inputElement.id === 'images' ? 'image' : 'video';
    const previewContainer = document.getElementById(inputElement.id === 'images' ? 'image-preview' : 'video-preview');

    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, preventDefaults, false);
    });

    function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }

    ['dragenter', 'dragover'].forEach(eventName => {
        dropArea.addEventListener(eventName, highlight, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, unhighlight, false);
    });

    function highlight() {
        dropArea.classList.add('highlight-drop');
    }

    function unhighlight() {
        dropArea.classList.remove('highlight-drop');
    }

    dropArea.addEventListener('drop', function(e) {
        const dt = e.dataTransfer;
        const droppedFiles = Array.from(dt.files);

        // Ki·ªÉm tra gi·ªõi h·∫°n s·ªë l∆∞·ª£ng
        const filesArray = type === 'image' ? window.selectedImages : window.selectedVideos;

        if (filesArray.length + droppedFiles.length > maxFiles) {
            alert(`B·∫°n ch·ªâ c√≥ th·ªÉ ch·ªçn t·ªëi ƒëa ${maxFiles} ${type === 'image' ? '·∫£nh' : 'video'}.`);
            return;
        }

        // Th√™m c√°c file m·ªõi v√†o m·∫£ng
        if (type === 'image') {
            window.selectedImages = window.selectedImages.concat(droppedFiles);
            syncFiles(inputElement, window.selectedImages);
            updateFilePreview(previewContainer, window.selectedImages, type, inputElement);
        } else {
            window.selectedVideos = window.selectedVideos.concat(droppedFiles);
            syncFiles(inputElement, window.selectedVideos);
            updateFilePreview(previewContainer, window.selectedVideos, type, inputElement);
        }
    }, false);
}

// Thi·∫øt l·∫≠p g·ª≠i form v·ªõi hi·ªáu ·ª©ng loading
function setupFormSubmission() {
    const form = document.querySelector('form');
    const submitBtn = form.querySelector('button[type="submit"]');

    form.addEventListener('submit', function(e) {
        // Ki·ªÉm tra validate tr∆∞·ªõc khi submit
        if (!form.checkValidity()) {
            return;
        }

        e.preventDefault();

        // ƒê·∫£m b·∫£o ƒë·ªìng b·ªô files tr∆∞·ªõc khi submit
        syncFiles(document.getElementById('images'), window.selectedImages);
        syncFiles(document.getElementById('videos'), window.selectedVideos);

        // Hi·ªÉn th·ªã loading
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang ƒëƒÉng...';
        submitBtn.disabled = true;

        // Submit form sau 1s
        setTimeout(() => {
            form.submit();
        }, 1000);
    });
}


